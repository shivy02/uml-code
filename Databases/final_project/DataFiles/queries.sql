
CREATE TABLE DOCTORS (
    D_ID INT PRIMARY KEY,
    D_NAME TEXT,
    D_GENDER TEXT,
    D_AGE INT,
    D_SPECIALIZATION TEXT,
    D_YEARS_OF_EXPERIENCE INT,
    D_CONTACT TEXT,
    D_STREET TEXT,
    D_CITY TEXT
);

CREATE TABLE PATIENTS (
    P_ID INT PRIMARY KEY,
    P_NAME TEXT,
    P_GENDER TEXT,
    P_AGE INT,
    P_DISEASE TEXT,
    P_CONTACT TEXT,
    P_STREET TEXT,
    P_CITY TEXT
);

CREATE TABLE NURSES (
    N_ID INT PRIMARY KEY,
    N_NAME TEXT,
    N_SPECIALIZATION TEXT,
    N_SHIFT INT,
    N_STREET TEXT,
    N_CITY TEXT
);

CREATE TABLE P_ASSIGNMENT (
    P_ID INT,
    D_ID INT,
    PRIMARY KEY (P_ID, D_ID),
    FOREIGN KEY (P_ID) REFERENCES PATIENTS(P_ID),
    FOREIGN KEY (D_ID) REFERENCES DOCTORS(D_ID)
);

CREATE TABLE N_ASSISTS (
    N_ID INT,
    D_ID INT,
    PRIMARY KEY (N_ID, D_ID),
    FOREIGN KEY (N_ID) REFERENCES NURSES(N_ID),
    FOREIGN KEY (D_ID) REFERENCES DOCTORS(D_ID)
);

CREATE TABLE TESTS (
    T_ID INT PRIMARY KEY,
    T_NAME TEXT,
    P_ID INT,
    D_ID INT,
    I_ID INT,
    T_DATE TEXT,
    T_RESULT TEXT,
    FOREIGN KEY (P_ID) REFERENCES PATIENTS(P_ID),
    FOREIGN KEY (D_ID) REFERENCES DOCTORS(D_ID),
    FOREIGN KEY (I_ID) REFERENCES INSTRUMENTS(I_ID)
);

CREATE TABLE INSTRUMENTS (
    I_ID INT PRIMARY KEY,
    I_NAME TEXT,
    I_MANUFACTURER TEXT
);

.mode csv
.import doctors.csv DOCTORS
.import patients.csv PATIENTS
.import nurses.csv NURSES
.import p_assignment.csv P_ASSIGNMENT
.import n_assists.csv N_ASSISTS
.import instruments.csv INSTRUMENTS
.import tests.csv TESTS

--doctors that Richard Miller is consulting with
SELECT DOCTORS.*
FROM DOCTORS
JOIN P_ASSIGNMENT ON DOCTORS.D_ID = P_ASSIGNMENT.D_ID
JOIN PATIENTS ON P_ASSIGNMENT.P_ID = PATIENTS.P_ID
WHERE PATIENTS.P_NAME = 'RICHARD MILLER';

--test results of cancer patients
SELECT * FROM TESTS
JOIN PATIENTS ON TESTS.P_ID = PATIENTS.P_ID
WHERE PATIENTS.P_DISEASE LIKE '%cancer%';

instruments that start with an s
List all instruments with manufacturers starting with 'S'

SELECT I_MANUFACTURER
FROM INSTRUMENTS
WHERE UPPER(I_MANUFACTURER) LIKE 'S%'
GROUP BY I_MANUFACTURER;

--most experienced doctor in hospital
SELECT *
FROM DOCTORS
WHERE CAST(D_YEARS_OF_EXPERIENCE AS INTEGER) = (SELECT MAX(CAST(D_YEARS_OF_EXPERIENCE AS INTEGER)) FROM DOCTORS);

--patients of James Smith that live in the same street/city as him
SELECT * FROM PATIENTS
JOIN P_ASSIGNMENT ON PATIENTS.P_ID = P_ASSIGNMENT.P_ID
JOIN DOCTORS ON P_ASSIGNMENT.D_ID = DOCTORS.D_ID
WHERE DOCTORS.D_NAME = 'JAMES SMITH' AND PATIENTS.P_STREET = DOCTORS.D_STREET AND PATIENTS.P_CITY = DOCTORS.D_CITY;

--nurses who assist at least 2 doctors
SELECT NURSES.N_ID, NURSES.N_NAME, COUNT(DISTINCT N_ASSISTS.D_ID) AS NUM_DOCTORS_ASSISTED
FROM N_ASSISTS
JOIN NURSES ON N_ASSISTS.N_ID = NURSES.N_ID
GROUP BY NURSES.N_ID
HAVING NUM_DOCTORS_ASSISTED >= 2;

--doctor and number of nurses they have in descending order
SELECT D.D_ID, D.D_NAME, COUNT(DISTINCT N.N_ID) AS NUM_NURSES
FROM DOCTORS D
LEFT JOIN N_ASSISTS N ON D.D_ID = N.D_ID
GROUP BY D.D_ID, D.D_NAME
ORDER BY NUM_NURSES DESC;

-- nurses not assigned to doctors
SELECT * FROM NURSES
WHERE N_ID NOT IN (SELECT N_ID FROM N_ASSISTS);

--increments experience of female doctors by 5 years
UPDATE DOCTORS SET D_YEARS_OF_EXPERIENCE = D_YEARS_OF_EXPERIENCE + 5 WHERE D_GENDER = 'f';

--delete all tests whose result is negative
DELETE FROM TESTS WHERE T_RESULT = 'negative';

.backup hospitaldb.sql